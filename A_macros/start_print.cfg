#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("50")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  ##  Uncomment for Beacon Contact (1 of 4 for beacon contact)
  #SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  #STATUS_HOMING                                         # Set LEDs to homing-mode
  SET_PIN PIN=daylight VALUE=1.0                        # Turn LEDs on
  M140 S{target_bed}                                               # Set bed temp but dont wait
  CG28 #G28                                              # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    #STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed and waits
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    #STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed and waits
    SET_DISPLAY_TEXT MSG="Soak for 2min" #5 min               # Display info on display
    #G4 P60000 #P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150      # Heats the nozzle to 150c but doesnt wait for it to stabilize
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=147
  ;M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Beacon contact (2 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=1                     # Calibrate z offset and beacon model

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  #  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  #STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                        # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  
  ## Uncomment for Beacon Contact (3 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=0                     # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  #STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  #M109 S{target_extruder}                               # Heat the hotend to set temp
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder|int} #Heats the nozzle to printing temp but doesnt wait for it to stabilize
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder|int-5}    #Heats the nozzle to printing temp but doesnt wait for it to stabilize
  
  ##   Uncomment for Beacon Contact (4 of 4 for beacon contact)
  #SET_GCODE_OFFSET Z=0.06                              # Add a little offset for hotend thermal expansion

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  #STATUS_PRINTING                                       # Set LEDs to printing-mode
  
  #G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  #G0 Z0.4                                               # Raise Z to 0.4
  #G91                                                   # Incremental positioning 
  #G1 X100 E20 F1000                                     # Primeline
  #G90                                                   # Absolute position
  SQUIGGLY_PURGE









#----------------------------------------------------------------------

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %} #was +2 then +10
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                         ; wait for buffer to clear
    G92 E0                                       ; zero the extruder
    G1 E-15.0 F1800                              ; retract filament
    
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 #disable extruder for g2 reloading filament
    
    G90                                          ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000      ; move nozzle fast to remove stringing
    G0 X40 Y{th.axis_maximum.y - 40} F8000 #3600  #X{th.axis_maximum.x//2}; park nozzle at rear
    M107                                         ; turn off fan
    
    SET_DISPLAY_TEXT MSG="Print finished"
    #RESPOND TYPE=echo MSG="Print over. Starting power off check macro"
    #UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30          #@@@@@@@@@@@@@@@@@@@@@uncomment when plug on trident
    
    BED_MESH_CLEAR
    _RESET_VELOCITY_LIMIT                        #definition at bottom
    #M18                                         #disable all motors
    #UPDATE_DELAYED_GCODE ID=filter_off DURATION=180 #keeps nevermore running 180s
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_PIN PIN=daylight VALUE=0.25
    M118 PRINT END


    #----------
    # SAVE_GCODE_STATE NAME=STATE_PRINT_END

    # M400                           ; wait for buffer to clear
    # G92 E0                         ; zero the extruder
    # G1 E-10.0 F3600                ; retract filament
    # G91                            ; relative positioning
    # G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    # TURN_OFF_HEATERS
    # M107                           ; turn off fan
    # G1 Z2 F3000                    ; move nozzle up 2mm
    # G90                            ; absolute positioning
    # G0 X150 Y170 F3600            ; park nozzle at rear ############################################
    # BED_MESH_CLEAR
    
    # # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # # command pair is to restore the printer's coordinate system
    # # and speed settings since the commands above change them.
    # # However, to prevent any accidental, unintentional toolhead
    # # moves when restoring the state, explicitly set MOVE=0.
    # RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


#----------------------------------------------------------------------

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    M118 CANCEL_PRINT ACTIVATED


#----------------------------------------------------------------------

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro _RESET_VELOCITY_LIMIT]
#description: Restore all velocity limits to configured defaults
gcode:
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
  SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
  M220 S100
  M221 S100
  M118 Velocity limits have been reset.
